{"version":3,"sources":["components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","hooks/useHarvest.ts","hooks/useApprove.ts","components/TokenInput/TokenInput.tsx","components/Input/Input.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","components/Tags.tsx","hooks/useStake.ts","config/index.ts","components/layout/Flex.tsx","hooks/useUnstake.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","useHarvest","farmPid","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onReward","useCallback","a","harvest","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useSousHarvest","sousId","isUsingBnb","sousChefContract","useSousChef","handleHarvest","soushHarvestBnb","soushHarvest","updateUserPendingReward","updateUserBalance","useApprove","lpContract","onApprove","approve","tx","useSousApprove","updateUserAllowance","useLotteryApprove","cakeContract","usePbear","lotteryContract","useLottery","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","primary","StyledTokenSymbol","span","TokenInput","max","symbol","onChange","onSelectMax","value","depositFeeBP","TranslateString","useI18n","toLocaleString","Input","endAdornment","onClick","placeholder","BigNumber","times","toString","StyledInputWrapper","input","radii","default","StyledInput","startAdornment","Wrapper","ExpandableSectionButton","expanded","aria-label","role","color","bold","defaultProps","NoFeeTag","variant","outline","startIcon","CoreTag","CommunityTag","BinanceTag","useSousStake","handleStake","amount","stake","sousStakeBnb","sousStake","updateUserStakedBalance","onStake","useStake","console","info","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","SYRUPIDS","useSousUnstake","isOldSyrup","includes","onUnstake","unstake","sousEmegencyUnstake","sousUnstake","useUnstake","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","liquidityUrlPathParts","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","rawEarningsBalance","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","isTokenOnly","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","getContract","handleApprove","error","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","calculatePbearEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfPbear","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","PBEAR","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","FarmTabButtons","useRouteMatch","url","isExact","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePricePbearBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","farmsList","farmsToDisplay","cakeRewardPerYear","pbearPerBlock","poolWeight","pow","comparedTo","Page","textAlign","exact","responsive"],"mappings":"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","file":"static/js/9.92bb4d57.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, usePbear, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = usePbear()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        By pressing &quot;Confirm&quot; you agree that bears.finance is not responsible in the lose of your funds.\n      </StyledMaxText>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {depositFeeBP > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\n          {symbol}\n        </StyledMaxText>\n      ) : null}\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const PBEAR_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const PBEAR_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0 }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP }) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 12 ? (\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size=\"sm\"\n            variant=\"secondary\"\n            marginBottom=\"15px\"\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n        ) : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress)\n    }\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n      />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          PBEAR\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculatePbearEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting PBEAR balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting PBEAR balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculatePbearEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfPbear = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculatePbearEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculatePbearEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculatePbearEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculatePbearEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'PBEAR per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfPbear })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfPbear })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfPbear })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfPbear })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. PBEAR-BNB LP, LINK-BNB LP,\n  // NAR-PBEAR LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly\n    ? farm.tokenSymbol.toLowerCase()\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.PBEAR) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'PBEAR'\n  const farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'PBEAR' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>\n          {farm.depositFeeBP / 100}%\n        </Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = () => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={!isExact ? 1 : 0} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(999, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(999, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, PBEAR_PER_BLOCK, PBEAR_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePricePbearBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePricePbearBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { tokenMode } = farmsProps\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === PBEAR_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.pbearPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice)\n        }\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {tokenMode\n          ? TranslateString(10002, 'Stake tokens to earn PBEAR')\n          : TranslateString(320, 'Stake LP tokens to earn PBEAR')}\n      </Heading>\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(10000, 'Deposit Fee will be used to buyback PBEAR')}\n      </Heading>\n      <FarmTabButtons />\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      <Image src=\"/images/bear/8.png\" alt=\"illustration\" width={1352} height={587} responsive />\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}